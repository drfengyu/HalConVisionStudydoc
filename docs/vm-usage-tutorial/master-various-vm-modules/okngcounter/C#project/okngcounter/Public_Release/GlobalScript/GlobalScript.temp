{"Version":"V3.4.0","ScriptPassword":"","ScriptContent":"using System; \r\nusing VM.GlobalScript.Methods;\r\nusing System.Windows.Forms; \r\nusing iMVS_6000PlatformSDKCS;\r\nusing System.Runtime.InteropServices;\r\n\r\n/*****************************************\r\n * Example explanation:Example of multi process control operation\r\n * Logic Control:Single run, each flow execute once\r\n * Continuous run:continuous run, each flow execute continuous\r\n * 示例说明: 默认代码\r\n * 控制逻辑: 单次运行：所有流程运行一次\r\n *           连续运行：所有流程连续运行\r\n * ***************************************/\r\npublic class UserGlobalScript : UserGlobalMethods,IScriptMethods\r\n{\r\n        /// <summary>\r\n        /// Init\r\n        /// </summary>\r\n\t\t/// <returns>Success:return 0</returns>\r\n        public int Init()\r\n        {\r\n        \t//SDK init\r\n            return InitSDK();\r\n        }\r\n\r\n        /// <summary>\r\n        /// execute function\r\n        /// Single run:the function execute once\r\n        /// Continuous run:Repeat the function at regular intervals\r\n\t\t/// 运行函数\r\n        /// 单次执行:该函数执行一次\r\n        /// 连续执行:以一定时间间隔重复执行该函数\r\n        /// </summary>\r\n\t\t/// <returns>Success:return 0</returns>\r\n        public int Process()\r\n        {\r\n        \t//m_operateHandle SDK handle\r\n            if (m_operateHandle == IntPtr.Zero)\r\n            {return ImvsSdkPFDefine.IMVS_EC_NULL_PTR;}\r\n\t\t\t\r\n            //All processes are executed by default\r\n\t\t\t//If execute in your own define logic,please remove the function :DefaultExecuteProcess, Create your own logic function.\r\n\t\t\t//默认执行全部流程，\r\n\t\t\t//如果自定义流程执行逻辑，请移除DefaultExecuteProcess方法，编写自定义流程执行逻辑代码\r\n\t\t\tint nRet = DefaultExecuteProcess();\r\n\t\t\t\r\n\t\t\treturn nRet;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// SDK callback function \r\n        /// </summary>\r\n        public override void ResultDataCallBack(IntPtr outputPlatformInfo, IntPtr puser)\r\n        {\r\n            base.ResultDataCallBack(outputPlatformInfo, puser);\r\n            ImvsSdkPFDefine.IMVS_PF_OUTPUT_PLATFORM_INFO struInfo = (ImvsSdkPFDefine.IMVS_PF_OUTPUT_PLATFORM_INFO)Marshal.PtrToStructure(outputPlatformInfo, typeof(ImvsSdkPFDefine.IMVS_PF_OUTPUT_PLATFORM_INFO));\r\n            switch (struInfo.nInfoType)\r\n            {\r\n                //Get module result\r\n\t\t\t\t//获取模块结果数据\r\n                case (uint)ImvsSdkPFDefine.IMVS_CTRLC_OUTPUT_PlATFORM_INFO_TYPE.IMVS_ENUM_CTRLC_OUTPUT_PLATFORM_INFO_MODULE_RESULT:\r\n                    {\r\n                    \tImvsSdkPFDefine.IMVS_PF_MODULE_RESULT_INFO_LIST_P resultInfo = (ImvsSdkPFDefine.IMVS_PF_MODULE_RESULT_INFO_LIST_P)Marshal.PtrToStructure(struInfo.pData, typeof(ImvsSdkPFDefine.IMVS_PF_MODULE_RESULT_INFO_LIST_P));\r\n                    \tbreak;\r\n                    }\r\n                ///Get process execute state\r\n\t\t\t\t//获取流程运行状态\r\n                case (uint)ImvsSdkPFDefine.IMVS_CTRLC_OUTPUT_PlATFORM_INFO_TYPE.IMVS_ENUM_CTRLC_OUTPUT_PLATFORM_INFO_WORK_STATE:\r\n                    {\r\n                        ImvsSdkPFDefine.IMVS_PF_MODULE_WORK_STAUS stWorkStatus = (ImvsSdkPFDefine.IMVS_PF_MODULE_WORK_STAUS)Marshal.PtrToStructure(struInfo.pData, typeof(ImvsSdkPFDefine.IMVS_PF_MODULE_WORK_STAUS));\r\n                        break;\r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n}","ScriptRefences":null}